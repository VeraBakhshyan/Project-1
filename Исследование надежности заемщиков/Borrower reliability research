Первая часть
Шаг 1. Откройте таблицу и изучите общую информацию о данных
Задание 1. Импортируйте библиотеку pandas. Считайте данные из csv-файла в датафрейм и сохраните в переменную data. Путь к файлу: /datasets/data.csv. Скачать датасет
Задание 2. Выведите первые 20 строчек датафрейма data на экран.
Задание 3. Выведите основную информацию о датафрейме с помощью метода info(). 
Шаг 2. Предобработка данных
Задание 4. Выведите количество пропущенных значений для каждого столбца. Используйте комбинацию двух методов.
Задание 5. В двух столбцах есть пропущенные значения. Один из них — days_employed. Пропуски в этом столбце вы обработаете на следующем этапе. Другой столбец с пропущенными значениями — total_income — хранит данные о доходах. На сумму дохода сильнее всего влияет тип занятости, поэтому заполнить пропуски в этом столбце нужно медианным значением по каждому типу из столбца income_type. Например, у человека с типом занятости сотрудник пропуск в столбце total_income должен быть заполнен медианным доходом среди всех записей с тем же типом. 
Задание 6. В данных могут встречаться артефакты (аномалии) — значения, которые не отражают действительность и появились по какой-то ошибке. Таким артефактом будет отрицательное количество дней трудового стажа в столбце days_employed. Для реальных данных это нормально. Обработайте значения в этом столбце: замените все отрицательные значения положительными с помощью метода abs().
Задание 7. Для каждого типа занятости выведите медианное значение трудового стажа в днях из столбца days_employed. У двух типов (безработные и пенсионеры) получатся аномально большие значения. Исправить такие значения сложно, поэтому оставьте их как есть.
Задание 8. Выведите перечень уникальных значений столбца children.
Задание 9. В столбце children есть два аномальных значения. Удалите строки, в которых встречаются такие аномальные значения из датафрейма data.
Задание 10. Ещё раз выведите перечень уникальных значений столбца children, чтобы убедиться, что артефакты удалены.
Задание 11. Заполните пропуски в столбце days_employed медианными значениями по каждому типу занятости income_type. 
Задание 12.  Убедитесь, что все пропуски заполнены. Проверьте себя и ещё раз выведите количество пропущенных значений для каждого столбца с помощью двух методов.
Задание 13. Замените вещественный тип данных в столбце total_income на целочисленный с помощью метода astype().
Задание 14. Обработайте неявные дубликаты в столбце education. В этом столбце есть одни и те же значения, но записанные по-разному: с использованием заглавных и строчных букв. Приведите их к нижнему регистру.
Задание 15. Выведите на экран количество строк-дубликатов в данных. Если такие строки присутствуют, удалите их. Сбрасывать индексы после удаления строк дубликатов с помощью reset_index(drop=True) здесь не требуется.
Задание 16. На основании диапазонов, указанных ниже, создайте в датафрейме data столбец total_income_category с категориями:
* 		0–30000 — 'E';
* 		30001–50000 — 'D';
* 		50001–200000 — 'C';
* 		200001–1000000 — 'B';
* 		1000001 и выше — 'A'.
Например, кредитополучателю с доходом 25000 нужно назначить категорию 'E', а клиенту, получающему 235000, — 'B'.
Задание 17. Выведите на экран перечень уникальных целей взятия кредита из столбца purpose.
Задание 18. Создайте функцию, которая на основании данных из столбца purpose сформирует новый столбец purpose_category, куда войдут следующие категории:
* 		'операции с автомобилем',
* 		'операции с недвижимостью',
* 		'проведение свадьбы',
* 		'получение образования'.
Например, если в столбце purpose находится подстрока 'на покупку автомобиля', то в столбце purpose_category должна появиться строка 'операции с автомобилем'.
Используйте собственную функцию с именем categorize_purpose() и метод apply(). Изучите данные в столбце purpose и определите, какие подстроки помогут вам правильно определить категорию.
Вторая часть
Шаг 3. Исследуйте данные и ответьте на вопросы
Ответы на вопросы можно разместить в ячейках тетрадок Jupyter Notebook с типом markdown.
* 		Задание 19. Есть ли зависимость между количеством детей и возвратом кредита в срок?
* 		Задание 20. Есть ли зависимость между семейным положением и возвратом кредита в срок?
* 		Задание 21. Есть ли зависимость между уровнем дохода и возвратом кредита в срок?
* 		Задание 22. Как разные цели кредита влияют на его возврат в срок?
* 		Задание 23. Приведите возможные причины появления пропусков в исходных данных.
* 		Задание 24. Объясните, почему заполнить пропуски медианным значением — лучшее решение для количественных переменных.
Ответы сопроводите интерпретацией — поясните, о чём именно говорит полученный вами результат.
Шаг 4. Напишите общий вывод
Оформление: Задание выполните в Jupyter Notebook. Программный код заполните в ячейках типа code, текстовые пояснения — в ячейках типа markdown. Примените форматирование и заголовки.


Исследование надежности заемщиков

Шаг 1.  Откройте таблицу и изучите общую информацию о данных

Задание 1. Импортируйте библиотеку pandas. Считайте данные из csv-файла в датафрейм и сохраните в переменную data. Путь к файлу:
/datasets/data.csv

import pandas as pd
​
try:
    data = pd.read_csv('/datasets/data.csv')
except:
    data = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv')

Задание 2. Выведите первые 20 строчек датафрейма data на экран.

data.head(20)

	children	days_employed	dob_years	education	education_id	family_status	family_status_id	gender	income_type	debt	total_income	purpose
0	1	-8437.673028	42	высшее	0	женат / замужем	0	F	сотрудник	0	253875.639453	покупка жилья
1	1	-4024.803754	36	среднее	1	женат / замужем	0	F	сотрудник	0	112080.014102	приобретение автомобиля
2	0	-5623.422610	33	Среднее	1	женат / замужем	0	M	сотрудник	0	145885.952297	покупка жилья
3	3	-4124.747207	32	среднее	1	женат / замужем	0	M	сотрудник	0	267628.550329	дополнительное образование
4	0	340266.072047	53	среднее	1	гражданский брак	1	F	пенсионер	0	158616.077870	сыграть свадьбу
5	0	-926.185831	27	высшее	0	гражданский брак	1	M	компаньон	0	255763.565419	покупка жилья
6	0	-2879.202052	43	высшее	0	женат / замужем	0	F	компаньон	0	240525.971920	операции с жильем
7	0	-152.779569	50	СРЕДНЕЕ	1	женат / замужем	0	M	сотрудник	0	135823.934197	образование
8	2	-6929.865299	35	ВЫСШЕЕ	0	гражданский брак	1	F	сотрудник	0	95856.832424	на проведение свадьбы
9	0	-2188.756445	41	среднее	1	женат / замужем	0	M	сотрудник	0	144425.938277	покупка жилья для семьи
10	2	-4171.483647	36	высшее	0	женат / замужем	0	M	компаньон	0	113943.491460	покупка недвижимости
11	0	-792.701887	40	среднее	1	женат / замужем	0	F	сотрудник	0	77069.234271	покупка коммерческой недвижимости
12	0	NaN	65	среднее	1	гражданский брак	1	M	пенсионер	0	NaN	сыграть свадьбу
13	0	-1846.641941	54	неоконченное высшее	2	женат / замужем	0	F	сотрудник	0	130458.228857	приобретение автомобиля
14	0	-1844.956182	56	высшее	0	гражданский брак	1	F	компаньон	1	165127.911772	покупка жилой недвижимости
15	1	-972.364419	26	среднее	1	женат / замужем	0	F	сотрудник	0	116820.904450	строительство собственной недвижимости
16	0	-1719.934226	35	среднее	1	женат / замужем	0	F	сотрудник	0	289202.704229	недвижимость
17	0	-2369.999720	33	высшее	0	гражданский брак	1	M	сотрудник	0	90410.586745	строительство недвижимости
18	0	400281.136913	53	среднее	1	вдовец / вдова	2	F	пенсионер	0	56823.777243	на покупку подержанного автомобиля
19	0	-10038.818549	48	СРЕДНЕЕ	1	в разводе	3	F	сотрудник	0	242831.107982	на покупку своего автомобиля

Задание 3. Выведите основную информацию о датафрейме с помощью метода info().

data.info()

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 21525 entries, 0 to 21524
Data columns (total 12 columns):
 #   Column            Non-Null Count  Dtype  
---  ------            --------------  -----  
 0   children          21525 non-null  int64  
 1   days_employed     19351 non-null  float64
 2   dob_years         21525 non-null  int64  
 3   education         21525 non-null  object 
 4   education_id      21525 non-null  int64  
 5   family_status     21525 non-null  object 
 6   family_status_id  21525 non-null  int64  
 7   gender            21525 non-null  object 
 8   income_type       21525 non-null  object 
 9   debt              21525 non-null  int64  
 10  total_income      19351 non-null  float64
 11  purpose           21525 non-null  object 
dtypes: float64(2), int64(5), object(5)
memory usage: 2.0+ MB

Шаг 2.  Предобработка данных

2.1  Удаление пропусков

Задание 4. Выведите количество пропущенных значений для каждого столбца. Используйте комбинацию двух методов.

data.isna().sum()

Out[4]:
children               0
days_employed       2174
dob_years              0
education              0
education_id           0
family_status          0
family_status_id       0
gender                 0
income_type            0
debt                   0
total_income        2174
purpose                0
dtype: int64

Задание 5. В двух столбцах есть пропущенные значения. Один из них — days_employed. Пропуски в этом столбце вы обработаете на следующем этапе. Другой столбец с пропущенными значениями — total_income — хранит данные о доходах. На сумму дохода сильнее всего влияет тип занятости, поэтому заполнить пропуски в этом столбце нужно медианным значением по каждому типу из столбца income_type. Например, у человека с типом занятости сотрудник пропуск в столбце total_income должен быть заполнен медианным доходом среди всех записей с тем же типом.

for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['total_income'].isna()), 'total_income'] = \
    data.loc[(data['income_type'] == t), 'total_income'].median()

2.2  Обработка аномальных значений

Задание 6. В данных могут встречаться артефакты (аномалии) — значения, которые не отражают действительность и появились по какой-то ошибке. таким артефактом будет отрицательное количество дней трудового стажа в столбце days_employed. Для реальных данных это нормально. Обработайте значения в этом столбце: замените все отрицательные значения положительными с помощью метода abs().

data['days_employed'] = data['days_employed'].abs()

Задание 7. Для каждого типа занятости выведите медианное значение трудового стажа days_employed в днях.

data.groupby('income_type')['days_employed'].agg('median')

income_type
безработный        366413.652744
в декрете            3296.759962
госслужащий          2689.368353
компаньон            1547.382223
пенсионер          365213.306266
предприниматель       520.848083
сотрудник            1574.202821
студент               578.751554
Name: days_employed, dtype: float64

У двух типов (безработные и пенсионеры) получатся аномально большие значения. Исправить такие значения сложно, поэтому оставьте их как есть. Тем более этот столбец не понадобится вам для исследования.

Задание 8. Выведите перечень уникальных значений столбца children.

data['children'].unique()
array([ 1,  0,  3,  2, -1,  4, 20,  5])

Задание 9. В столбце children есть два аномальных значения. Удалите строки, в которых встречаются такие аномальные значения из датафрейма data.

data = data[(data['children'] != -1) & (data['children'] != 20)]

Задание 10. Ещё раз выведите перечень уникальных значений столбца children, чтобы убедиться, что артефакты удалены.

data['children'].unique()
array([1, 0, 3, 2, 4, 5])

2.3  Удаление пропусков (продолжение)

Задание 11. Заполните пропуски в столбце days_employed медианными значениями по каждого типа занятости income_type.

for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['days_employed'].isna()), 'days_employed'] = \
    data.loc[(data['income_type'] == t), 'days_employed'].median()


Задание 12. Убедитесь, что все пропуски заполнены. Проверьте себя и ещё раз выведите количество пропущенных значений для каждого столбца с помощью двух методов.

data.isna().sum()

children            0
days_employed       0
dob_years           0
education           0
education_id        0
family_status       0
family_status_id    0
gender              0
income_type         0
debt                0
total_income        0
purpose             0
dtype: int64

2.4  Изменение типов данных

Задание 13. Замените вещественный тип данных в столбце total_income на целочисленный с помощью метода astype().

data['total_income'] = data['total_income'].astype(int)

2.5  Обработка дубликатов

Задание 14. Обработайте неявные дубликаты в столбце education. В этом столбце есть одни и те же значения, но записанные по-разному: с использованием заглавных и строчных букв. Приведите их к нижнему регистру. Проверьте остальные столбцы.

data['education'] = data['education'].str.lower()

Задание 15. Выведите на экран количество строк-дубликатов в данных. Если такие строки присутствуют, удалите их.

data.duplicated().sum()
71

data = data.drop_duplicates()

2.6  Категоризация данных

Задание 16. На основании диапазонов, указанных ниже, создайте в датафрейме data столбец total_income_category с категориями:
* 0–30000 — 'E';
* 30001–50000 — 'D';
* 50001–200000 — 'C';
* 200001–1000000 — 'B';
* 1000001 и выше — 'A'.
Например, кредитополучателю с доходом 25000 нужно назначить категорию 'E', а клиенту, получающему 235000, — 'B'. Используйте собственную функцию с именем categorize_income() и метод apply().

def categorize_income(income):
    try:
        if 0 <= income <= 30000:
            return 'E'
        elif 30001 <= income <= 50000:
            return 'D'
        elif 50001 <= income <= 200000:
            return 'C'
        elif 200001 <= income <= 1000000:
            return 'B'
        elif income >= 1000001:
            return 'A'
    except:
        pass

data['total_income_category'] = data['total_income'].apply(categorize_income)

Задание 17. Выведите на экран перечень уникальных целей взятия кредита из столбца purpose.

data['purpose'].unique()

array(['покупка жилья', 'приобретение автомобиля',
       'дополнительное образование', 'сыграть свадьбу',
       'операции с жильем', 'образование', 'на проведение свадьбы',
       'покупка жилья для семьи', 'покупка недвижимости',
       'покупка коммерческой недвижимости', 'покупка жилой недвижимости',
       'строительство собственной недвижимости', 'недвижимость',
       'строительство недвижимости', 'на покупку подержанного автомобиля',
       'на покупку своего автомобиля',
       'операции с коммерческой недвижимостью',
       'строительство жилой недвижимости', 'жилье',
       'операции со своей недвижимостью', 'автомобили',
       'заняться образованием', 'сделка с подержанным автомобилем',
       'получение образования', 'автомобиль', 'свадьба',
       'получение дополнительного образования', 'покупка своего жилья',
       'операции с недвижимостью', 'получение высшего образования',
       'свой автомобиль', 'сделка с автомобилем',
       'профильное образование', 'высшее образование',
       'покупка жилья для сдачи', 'на покупку автомобиля', 'ремонт жилью',
       'заняться высшим образованием'], dtype=object)

Задание 18. Создайте функцию, которая на основании данных из столбца purpose сформирует новый столбец purpose_category, в который войдут следующие категории:

* 'операции с автомобилем',
* 'операции с недвижимостью',
* 'проведение свадьбы',
* 'получение образования'.
Например, если в столбце purpose находится подстрока 'на покупку автомобиля', то в столбце purpose_category должна появиться строка 'операции с автомобилем'.
Используйте собственную функцию с именем categorize_purpose() и метод apply(). Изучите данные в столбце purpose и определите, какие подстроки помогут вам правильно определить категорию.
def categorize_purpose(row):
    try:
        if 'автом' in row:
            return 'операции с автомобилем'
        elif 'жил' in row or 'недвиж' in row:
            return 'операции с недвижимостью'
        elif 'свад' in row:
            return 'проведение свадьбы'
        elif 'образов' in row:
            return 'получение образования'
    except:
        return 'нет категории'

data['purpose_category'] = data['purpose'].apply(categorize_purpose)

Шаг 3. Исследуйте данные и ответьте на вопросы

#для анализа данных, я создам функцию, которая построит таблицу и в дальнейшем буду её использовать
def factor(row,parametr):
    data = row.groupby(parametr).agg({'debt':'sum'})
    data['count'] = row.groupby(parametr)['debt'].count()
    data['factor'] = data['debt'] / data['count'] * 100
    return data

Задание 19. Есть ли зависимость между количеством детей и возвратом кредита в срок?

data_children = factor(data,'children')
data_children.sort_values(by='factor',ascending=True)  

debt	count	factor 
children			
5	0	9	0.000000
0	1063	14091	7.543822
3	27	330	8.181818
1	444	4808	9.234609
2	194	2052	9.454191
4	4	41	9.756098

data_children.loc[data_children['count'] > 100].sort_values(by='factor',ascending=True)

debt	count	factor 
children			
0	1063	14091	7.543822
3	27	330	8.181818
1	444	4808	9.234609
2	194	2052	9.454191
Вывод: из таблицы видно, что клиенты у которых нет детей в наибольшей степени выплачивают кредиты своевременно

Задание 20. Есть ли зависимость между семейным положением и возвратом кредита в срок?

data_family = factor(data,'family_status')
data_family.sort_values(by='factor',ascending=True) 

debt	count	factor 
family_status			
вдовец / вдова	63	951	6.624606
в разводе	84	1189	7.064760
женат / замужем	927	12261	7.560558
гражданский брак	385	4134	9.313014
Не женат / не замужем	273	2796	9.763948
Вывод: по результатам таблицы можно сказать, что люди находящиеся в отношениях более ответственны

Задание 21. Есть ли зависимость между уровнем дохода и возвратом кредита в срок?

data_income = factor(data,'total_income_category')
data_income.sort_values(by='factor',ascending=True)

	debt	count	factor
total_income_category			
D	21	349	6.017192
B	354	5014	7.060231
A	2	25	8.000000
C	1353	15921	8.498210
E	2	22	9.090909

data_income.loc[data_income['count'] > 100].sort_values(by='factor',ascending=True)

	debt	count	factor
total_income_category			
D	21	349	6.017192
B	354	5014	7.060231
C	1353	15921	8.498210
Вывод: применила логическую индексацию по тому же типу, что и к предыдущему заданию и выяснила, что наиболее дисциплинированными заемщиками являются клиенты из категории D

Задание 22. Как разные цели кредита влияют на его возврат в срок?

data_purpose = factor(data,'purpose_category')
data_purpose.sort_values(by='factor',ascending=True)

	debt	count	factor
purpose_category			
операции с недвижимостью	780	10751	7.255139
проведение свадьбы	183	2313	7.911803
получение образования	369	3988	9.252758
операции с автомобилем	400	4279	9.347978
Вывод: я имела ввиду: срок возврата кредита не зависит от цели, и каждая цель является релевантной для скорбалла

Задание 23. Приведите возможные причины появления пропусков в исходных данных.
Ответ: причины пропуска непонятны - это мог быть как технологический фактор, так и человеческий

Задание 24. Объясните, почему заполнить пропуски медианным значением — лучшее решение для количественных переменных.
Ответ: Если у нескольких клиентов будут максимально высокие или минимальные значения, лучше применить медианный метод решения, так как он будет являтся наиболее оптимальным. Так как при применение по средней, решение может искажаться либо в меньшую, либо в большую сторону

Шаг 4: общий вывод.

В рамках исследования были проверены и выявлены следующие гипотезы.
Есть ли зависимость между количеством детей и возвратом кредита в срок? В рамках исследования мне не удалось оценить группы клиентов с 4 и 5 детьми, так как выборка оказалась слишком мала Категория клиентов без детей оказалась самой большой и процент задержек по кредиту самый низкий. Самый высокий процент задержек по оплатам оказался у клиентов с двумя детьми.
Есть ли зависимость между семейным положением и возвратом кредита в срок? По результатам проверки выявлено следующее - меньше всего просрочек по кредитам у вдов/вдовцев, больше всего у клиентов, не состоящих в отношениях. Самой большой категорией являются клиенты в браке.
Есть ли зависимость между уровнем дохода и возвратом кредита в срок? По результатам проверки можнос сказать, что меньше всего просрочек по кредитам у клиентов с уровнем дохода от 30 000 до 50 000 руб., а больше всего у клиентов с уровнем дохода от 200 000 до 1 000 000 руб.(самая большая категория в выборке) Категория клиентов с значениями доходов (ниже 30 000 руб или выше 1 000 000 руб) являются слишком маленькой. Достоверно говорить о вероятности просрочек от этих клиентов нельзя.
Как разные цели кредита влияют на его возврат в срок? По результатам проверки данной гипотезы выявлена следующая закономерность - меньше всего просрочек в самой большой категории по кредитам на недвижимость, а больше всего по займам на автомобиль. Срок возврата кредита не зависит от цели, и каждая цель является релевантной для скорбалла
Для наиболее точного установления скоринга, также можно провести исследование по выявлению количества просроченных дней и объему просрочки, так как данные анализ позволит наиболее точно выявить группу людей , которая порождает наибольшие финансовые проблемы
